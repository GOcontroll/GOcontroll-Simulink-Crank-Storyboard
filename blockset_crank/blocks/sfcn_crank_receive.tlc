%%***************************************************************************************
%% file         sfcn_crank_receive.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%% endinternal
%%
%%***************************************************************************************

%implements sfcn_crank_receive "C"
%include "crank_common.tlc"

%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
	%<CrankCommonBlockTypeSetup()>
	%<LibAddToCommonIncludes(block.SFcnParamSettings.header)>
%endfunction

%function BlockInstanceSetup(block, system) void
	%assign channel = "::gre_%<block.SFcnParamSettings.channel>"
	%if EXISTS(%<channel>) == 0
		%assign %<channel> = 1
	%else
		%assign error = "Can't make more than one crank channel receive block for the same channel %<channel>"
		%<LibBlockReportError(block, error)>
	%endif
%endfunction

%function Start(block, system) Output
	%assign handle = "gre_%<block.SFcnParamSettings.channel>"
	%assign nbuffer = "gre_buff_%<block.SFcnParamSettings.channel>"
	%assign event_data = "gre_event_%<block.SFcnParamSettings.channel>"
	%assign nbuffer_len = LibBlockParameterValue(nbuff_len, 0)
	
	%openfile tmpBuf
	gre_io_t *%<handle>; %% receive channel handle, one per receive channel
	gre_io_serialized_data_t *%<nbuffer>; %% serialized receive buffer
	void *%<event_data>; %% deserialized data to pass to deserialize blocks
	%closefile tmpBuf

	%assign srcFile = LibGetModelDotCFile()
	%<LibSetSourceFileSection(srcFile, "UserTop", tmpBuf)>
	%<handle> = gre_io_open("%<block.SFcnParamSettings.channel>", GRE_IO_TYPE_RDONLY | GRE_IO_FLAG_NONBLOCK);
	%<nbuffer> = gre_io_size_buffer(NULL, %<nbuffer_len>);
%endfunction

%% Function: Output ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Outputs(block, system) Output
	%assign handle = "gre_%<block.SFcnParamSettings.channel>"
	%assign nbuffer = "gre_buff_%<block.SFcnParamSettings.channel>"
	%assign event_data = "gre_event_%<block.SFcnParamSettings.channel>"
	%assign events = block.SFcnParamSettings.events
	%assign event = LibBlockOutputSignal(1, "", "", 0)
	{
		char *event_addr;
		char *event_name;
		char *event_fmt;
		int32_t n = 0;
		while ((n = gre_io_receive(%<handle>, &%<nbuffer>)) > 0){
			gre_io_unserialize(%<nbuffer>, &event_addr, &event_name, &event_fmt, &%<event_data>);
			if (!event_name) {
				continue; %% no event name
			}

			%foreach eventnum = SIZE(events,1)
				%if eventnum == 0
					if (strcmp(event_name, "%<events[eventnum]>") == 0) {
						%<event> = %<eventnum>;
					}
				%else
					else if (strcmp(event_name, "%<events[eventnum]>") == 0) {
						%<event> = %<eventnum>;
					}
				%endif
			%endforeach
			else {
				continue; %% no matching event found
			}
			event_name = NULL;
			%% Call a function to process the received message via function-call subsystem
			%foreach callIdx = NumSFcnSysOutputCalls
				%if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
					%continue
				%endif
				%% call the downstream system
				%<LibBlockExecuteFcnCall(block, callIdx)>\
			%endforeach
		}
	}
%endfunction

%function Terminate(block, system) Output
	%assign handle = "gre_%<block.SFcnParamSettings.channel>"
	%assign nbuffer = "gre_buff_%<block.SFcnParamSettings.channel>"
	gre_io_free_buffer(%<nbuffer>);
	gre_io_close(%<handle>);
%endfunction
