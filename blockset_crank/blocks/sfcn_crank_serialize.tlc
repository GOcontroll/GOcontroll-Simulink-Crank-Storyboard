%%***************************************************************************************
%% file         sfcn_crank_deserialize.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%% endinternal
%%
%%***************************************************************************************

%implements sfcn_crank_serialize "C"
%include "crank_common.tlc"

%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
	%<CrankCommonBlockTypeSetup()>
	%<LibAddToCommonIncludes(block.SFcnParamSettings.header)>
%endfunction

%function Start(block, system) Output
	%assign event_name = block.SFcnParamSettings.event_name
	%assign nbuffer = "gre_buff_%<event_name>"
	%assign event_data = "gre_event_%<event_name>"

	%assign channel = "::gre_%<block.SFcnParamSettings.channel>"
	%if EXISTS(%<channel>) == 0
		%assign %<channel> = 1
		%assign handle = "gre_%<block.SFcnParamSettings.channel>"
		
		%openfile tmpBuf
			gre_io_t *%<handle>; %% send channel handle, one per send channel
		%closefile tmpBuf
		
		%assign srcFile = LibGetModelDotCFile()
		%<LibSetSourceFileSection(srcFile, "UserTop", tmpBuf)>
	%endif
	%openfile tmpBuf
		gre_io_serialized_data_t *%<nbuffer> = NULL; %% serialized send buffer, one per event

		%<event_name>_event_t %<event_data>; %% deserialized data to send, one per event
	%closefile tmpBuf
		
	%assign srcFile = LibGetModelDotCFile()
	%<LibSetSourceFileSection(srcFile, "UserTop", tmpBuf)>

	memset(&%<event_data>, 0, sizeof(%<event_data>));
%endfunction

%% Function: Output ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Outputs(block, system) Output
	%assign handle = "gre_%<block.SFcnParamSettings.channel>"
	%assign nbuffer = "gre_buff_%<block.SFcnParamSettings.event_name>"
	%assign event_data = "gre_event_%<block.SFcnParamSettings.event_name>"
	%assign input_names = block.SFcnParamSettings.input_names
	%assign event_name = block.SFcnParamSettings.event_name

	{
		%foreach innum = SIZE(input_names, 1)
				%<event_data>.%<input_names[innum]> = %<LibBlockInputSignal(innum, "", "", 0)>;
		%endforeach
		%assign fmt = FEVAL("upper", event_name)
		%<nbuffer> = gre_io_serialize(%<nbuffer>, NULL, "%<event_name>",%<fmt>_FMT, &%<event_data>, sizeof(%<event_data>));
		if (%<nbuffer>) {
			gre_io_send(%<handle>, %<nbuffer>);
		}
	}
%endfunction

%function Terminate(block, system) Output
	%assign nbuffer = "gre_buff_%<block.SFcnParamSettings.event_name>"
	gre_io_free_buffer(%<nbuffer>);
	%assign channel = "::gre_%<block.SFcnParamSettings.channel>_cleanup"
	%if EXISTS(%<channel>) == 0
		%assign %<channel> = 1
		%assign handle = "gre_%<block.SFcnParamSettings.channel>"
		gre_io_close(%<handle>);
	%endif

%endfunction
