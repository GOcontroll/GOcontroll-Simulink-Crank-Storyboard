%%***************************************************************************************
%% file         sfcn_crank_deserialize.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%% endinternal
%%
%%***************************************************************************************

%implements sfcn_crank_deserialize "C"
%include "crank_common.tlc"

%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
	%<CrankCommonBlockTypeSetup()>
%endfunction

%function Start(block, system) Output
	%assign channel = "::gre_%<block.SFcnParamSettings.channel>"
	%if EXISTS(%<channel>) == 0
		%assign error = "There is no crank receive block for the channel: %<channel>"
		%<LibBlockReportError(block, error)>
	%endif
%endfunction

%% Function: Output ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Outputs(block, system) Output

	%assign event_data = "gre_event_%<block.SFcnParamSettings.channel>" %% see sfcn_crank_receive.tlc, this is the local variable the buffer gets stored in
	%assign output_names = block.SFcnParamSettings.output_names
	%assign event_name = block.SFcnParamSettings.event_name
	%assign event_num_set = LibBlockParameterValue(event_num,0)
	%assign event_num_in = LibBlockInputSignal(0, "", "", 0)

	
	%% if (%<event_num_set> == %<event_num_in>) {
	case %<event_num_set>:
		{ %%scope the definition of *data so it doesnt interfere with the other cases
		%if SIZE(output_names, 1)
			%<event_name>_event_t *data = (%<event_name>_event_t *)%<event_data>;
			
			%foreach outnum = SIZE(output_names, 1)
				%<LibBlockOutputSignal(outnum + 1, "", "", 0)> = data->%<output_names[outnum]>;
			%endforeach
		%endif
		
		%% Call a function to process the received message via function-call subsystem
		%foreach callIdx = NumSFcnSysOutputCalls
			%if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
				%continue
			%endif
			%% call the downstream system
			%<LibBlockExecuteFcnCall(block, callIdx)>\
		%endforeach
		break;
		}
	
%endfunction

%function Terminate(block, system) Output
%endfunction
